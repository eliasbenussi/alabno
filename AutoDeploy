#!/usr/bin/env python

import os
import sys
import subprocess
import argparse

parser = argparse.ArgumentParser()
    
parser.add_argument('destination',
                    help='the destination directory where to deploy'
                    )

parser.add_argument('domain',
                    help='the domain that users will use to connect to the server, such as example.com'
                    )

parser.add_argument('pem',
                    nargs='?',
                    default=None,
                    help='server.pem file containing private key and ssl certificate'
                    )

parser.add_argument('--simulate',
                    action='store_true',
                    default=False,
                    help='with simulate set, the current state of the repository will be deployed. Otherwise, a fresh repository will be cloned from the master git branch'
                    )

args = parser.parse_args()

# SETUP PATHS ##############################

# exec dir is alabno/
exec_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
original_parent = os.path.abspath(exec_dir + os.sep + '..')



screen_name = 'alabnodaemonservice'

def call_and_check(cmd):
    print('>> {}'.format(cmd))
    code = subprocess.call(cmd, shell=True)
    if code != 0:
        print('Command <{}> returned code {}'.format(cmd, code))
        sys.exit(1)
    return

if args.pem:
    pem_file = os.path.abspath(args.pem)

# stop any running servers
cmd = 'screen -X -S {} quit'.format(screen_name)
subprocess.call(cmd, shell=True)

# calculate directory paths
destination_directory = os.path.abspath(args.destination)
parent_directory = os.path.abspath(destination_directory + os.sep + '..')
target_directory_name = os.path.basename(os.path.normpath(destination_directory))

# get domain name
domain_name = args.domain

# go to the parent directory
os.chdir(parent_directory)

# remove the existing directory
call_and_check('rm -rf {}'.format(destination_directory))

# clone the repository
if args.simulate:
    cmd = 'cp -R {} {}'.format(exec_dir, destination_directory)
    call_and_check(cmd)
else:
    cmd = 'git clone https://github.com/ke00n/alabno --depth 1 {}'.format(target_directory_name)
    call_and_check(cmd)

# cd into it
os.chdir(destination_directory)

# compile it
call_and_check('make')

# change domain endpoint
endpoint_js_path = destination_directory + '/frontend/webclient/script/endpoint.js'
cmd = "echo \"var ws_address_stem = '://{}:';\" > {}".format(domain_name, endpoint_js_path)
call_and_check(cmd)

# copy over pem and jks files
if pem_file is not None:

    # Remove existing destination files
    #  alabno/frontend
    previous_directory = os.path.abspath(os.getcwd())
    frontend_directory = os.path.abspath(destination_directory + os.sep + 'frontend')
    os.chdir(frontend_directory)
    cmds = ['rm -rf *.key',
            'rm -rf *.p12',
            'rm -rf *.jks',
            'rm -rf *.crt',
            'rm -rf *.csr',
            'rm -rf *.pem']
    for cmd in cmds:
        call_and_check(cmd)

    # Copy the file
    cmd = 'cp {} {}'.format(pem_file, destination_directory + '/frontend/server.pem')
    call_and_check(cmd)

    print('A script will now be run to generate the necessary key and certificate files used by the servers')
    #  alabno/frontend/pem_to_jks.sh
    jks_script_path = os.path.abspath(destination_directory + os.sep + 'frontend' + os.sep + 'pem_to_jks.sh')

    # Run the script
    os.chdir(frontend_directory)
    call_and_check(jks_script_path)