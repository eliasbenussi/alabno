CLIENT -> SERVER

    {
        "type": "login",
        "username": "jjjj",
        "password": "9c4b8a984db84c98b49fa849a8"
    }
    
    {
        "type": "validatetoken",
        "username": "jjjj",
        "token": "4a9f84c84e4b"
    }
    Asks the server to try to re-login automatically, in case the session did not expire.
    
    {
        "type": "new_assignment",
        "id": "687ba687de5",
        "title": "PINTOS",
        "ex_type": "C",
        "model_git": "https://gitlab.doc.ic.ac.uk/ajf/autumn/haskell_quadratic.git",
        "students_git": [
            {git: "https://gitlab.doc.ic.ac.uk/autumn_16_17/haskell_quadratic_gj414.git", uname: "student1"},
            {git: "https://gitlab.doc.ic.ac.uk/autumn_16_17/haskell_quadratic_ap2314.git", uname: "student2"}
        ]
    }
    id is the user token received upon successful login. Kinda lika cookie.
    This message can only be used by a professor. Server will do the check.
    
    {
    	"type": "get_job",
    	"id": "687ba687de5",
    	"title": "haskell23"
    }
    requests an expansion of the section of the current job
    Each student row has a button which will call $scope.get_data(jobtitle,studentid)
    
    {
        "type": "retrieve_result",
        "subtype": "annotated",
        "id": "687ba687de5",
        "title": "haskell23",
        "student": "1"
    }
    Asks for the final results of an exercise of specific student
    Subtype used to determine which view to render (can currently be 'annotated' or 'postprocessor')
    // TODO: These should be sent once then cached per student
    
    {
        "type": "feedback",
        "id": "687ba687de5",
        "filename": "sequences.hs", 
        "ann_type": "semantic",
        "annotation": "don't call main main",
        "lineno": 69 
    }
    Tell all microservices about a new feedback annotation, with source code, type and annotation.
    
    {
        "type": "markfeedback",
        "id": "687ba687de5",
        "filename": "sequences.hs",
        "exercise_type": "haskellsequences",
        "mark": "A+"      // This is a string that can be A* A+ A B C D E F
    }
    Tell all microservices about a new feedback mark.
    
    {
        "type": "std_refresh_list",
        "id": "687ba687de5"
    }
    Student view requests to refresh the list of exercises
    Response: <std_ex_list>
    
    {
        "type": "std_retrieve_result",
        "id": "687ba687de5",
        "title": "haskell23",
        "student": "12",
        "hash": "7c9ba09ef89"
    }
    Student view client asks to visualize a single exercise, specific commit hash
    
    {
        "type": "retrieve_commits",
        "id": "687ba687de5",
        "title": "haskell23",
        "student": "1"
    }
    Asks for all the commit hashes of a single exercise and single student
    Reply is <commits>
    
    {
        "type": "refresh_commit",
        "id": "687ba687de5",
        "title" "haskell23",
        "student": "1"
    }
    Asks to check if there are new commits for a student exercise.
    Reply is <status_info>
    
    {
        "type": "prof_delete_exercise",
        "id": "687ba687de5",
        "title": "haskell23"
    }
    Asks to delete an exercise by title (because it's not present locally). There is no reply to this message.
    
SERVER -> CLIENT

    {
        "type": "login_success",
        "id": "a84be894f984",
        "usertype": "s"
    }
    id is the new token generated by the server
    usertype can be "s" "p" "a"
    
    {
        "type": "login_fail"
    }
    tells the client that login failed

    {
        "type": "alert",
        "message": "hello world"
    }
    generic error message from server to client. Client can display this in alert or other form of error popups
    
    {
        "type": "job_sent"
    }
    tells the client that the job has been submitted successfully to the JobManager. The Client can then return to the Professor's homepage.
    
    {
        "type": "job_list",
        "jobs": [
            {"title":"haskellquadratic","status":"ok","local":true},
            {"title":"pintos01","status":"pending","local":false}
            ]
    }
    Sends the list of existing jobs to the client
    valid status are "ok" "pending" "error" "processing"
    
    {
    	"type": "job_group",
    	"title": "haskell23",
    	"group": [
            {"idx":"0","uname":"gj"},
            {"idx":"1","uname":"ab"}
        ]
    }
    Sends the list of students marked for one job title.
    
    {
    	"type": "postpro_result",
    	"title": "haskell23",
    	"student": "1",
    	"data": "the json raw data"
    }
    Sends the postprocessor output to the client

    {
        "type": "annotated_files",
        "exercise_type": "haskellsequences",
        "mark": "A+",
        "files": [
          { "filename": "Sequences.hs",
            "data": [
              {"no":1, "content": "import Data.Maybe\n", "annotation": "" }
            ]
          }
        ]
    }
    Sends the exercise files with annotations per line to the client
    
    {
        "type": "typelist",
        "data": [
            "haskellsequences",
            "javarecursion"
        ]
    }
    Allowed exercise types. Will be sent upon successful login
    
    {
        "type": "std_ex_list",
        "data": [
            {
                "title": "haskell23",
                "commits": [
                    {
                        "stdno": "1",
                        "hash": "0987a098c0b8",
                        "status": "ok"
                    }
                ]
            }
        ]
    }
    Server sends to the student the list of exercises the student can view
    status can be "ok" "pending" "error"
    
    {
        "type": "commits",
        "data": [
            "ac987bf",
            "f0f8eeb"
        ]
    }
    Response to retrieve_commits. The commit hashes for a specific exercise/user
    
    {
        "type": "status_info",
        "message": "Your job was submitted",
        "color": "green",
        "timeout": 60
    }
    A generic status info message that is shown on top of the screen and that can be dismissed by the user.